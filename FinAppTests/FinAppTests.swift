//
//  FinAppTests.swift
//  FinAppTests
//
//  Created by –î–∞–Ω–∏–∏–ª –î–µ–º–µ–Ω—Ç—å–µ–≤ on 12.06.2025.
//

import XCTest
@testable import FinApp

final class TransactionTests: XCTestCase {

    private let isoFormatter = ISO8601DateFormatter()

    // MARK: - Test Data Setup

    func makeSampleTransaction(
        id: Int = 42,
        account: FinApp.AccountBrief? = nil,
        category: FinApp.Category? = nil,
        amount: Decimal? = nil,
        transactionDate: Date? = nil,
        comment: String? = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü",
        createdAt: Date? = nil,
        updatedAt: Date? = nil
    ) -> Transaction {
        guard let defaultDate = isoFormatter.date(from: "2025-06-12T07:13:22Z") else {
            XCTFail("Failed to create required test data")
            return Transaction(
                id: -1,
                account: AccountBrief(id: -1,
                                      name: "–û—à–∏–±–∫–∞",
                                      balance: 0,
                                      currency: "XXX"),
                category: Category(id: -1,
                                   name: "–û—à–∏–±–∫–∞",
                                   emoji: "‚ùå",
                                   direction: .income),
                amount: 0,
                transactionDate: Date(),
                comment: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
                createdAt: Date(),
                updatedAt: Date()
            )
        }
        let defaultAccount = AccountBrief(
            id: 1,
            name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç",
            balance: Decimal(1000.00),
            currency: "RUB"
        )
        let defaultCategory = Category(
            id: 2,
            name: "–ó–∞—Ä–ø–ª–∞—Ç–∞",
            emoji: "üí∞",
            direction: .income
        )

        return Transaction(
            id: id,
            account: account ?? defaultAccount,
            category: category ?? defaultCategory,
            amount: amount ?? Decimal(500.00),
            transactionDate: transactionDate ?? defaultDate,
            comment: comment,
            createdAt: createdAt ?? defaultDate,
            updatedAt: updatedAt ?? defaultDate
        )
    }

    // MARK: - JSON Object Tests

    func testJSONObjectValues() {
        let transaction = makeSampleTransaction()
        let json = transaction.jsonObject

        guard let dict = json as? [String: Any] else {
            XCTFail("jsonObject –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º account
        if let accountDict = dict["account"] as? [String: Any] {
            XCTAssertEqual(accountDict["name"] as? String, transaction.account.name)
            XCTAssertEqual(accountDict["balance"] as? String,
                           String(describing: transaction.account.balance))
            XCTAssertEqual(accountDict["currency"] as? String, transaction.account.currency)
        } else {
            XCTFail("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç account")
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º category
        if let categoryDict = dict["category"] as? [String: Any] {
            XCTAssertEqual(categoryDict["id"] as? Int, transaction.category.id)
            XCTAssertEqual(categoryDict["name"] as? String, transaction.category.name)
            XCTAssertEqual(categoryDict["emoji"] as? String,
                           String(transaction.category.emoji))
            XCTAssertEqual(categoryDict["isIncome"] as? Bool,
                           transaction.category.direction == .income)
        } else {
            XCTFail("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç category")
        }
    }

    func testJSONObjectWithNilComment() {
        let transaction = makeSampleTransaction(comment: nil)
        let json = transaction.jsonObject

        guard let dict = json as? [String: Any] else {
            XCTFail("jsonObject –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            return
        }

        XCTAssertNil(dict["comment"],
                     "comment –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å nil")
    }

    // MARK: - Parsing Tests

    func testParseValidTransaction() {
        let transaction = makeSampleTransaction()
        guard let json = transaction.jsonObject as? [String: Any] else {
            XCTFail("jsonObject –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Dictionary")
            return
        }

        let parsed = Transaction.parse(jsonObject: json)
        XCTAssertNotNil(parsed,
                        "–î–æ–ª–∂–µ–Ω –ø–∞—Ä—Å–∏—Ç—å—Å—è –≤–∞–ª–∏–¥–Ω—ã–π JSON")

        XCTAssertEqual(parsed?.comment, transaction.comment)
        XCTAssertEqual(parsed?.createdAt, transaction.createdAt)
        XCTAssertEqual(parsed?.updatedAt, transaction.updatedAt)
    }

    func testParseWithEmptyComment() {
        let transaction = makeSampleTransaction(comment: nil)
        guard let json = transaction.jsonObject as? [String: Any] else {
            XCTFail("jsonObject –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Dictionary")
            return
        }

        let parsed = Transaction.parse(jsonObject: json)
        XCTAssertNil(parsed?.comment, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å nil")
    }

    func testParseWithDifferentAmountFormats() {
        let amounts = [
            "500.00",
            "500",
            "0.01",
            "999999.99",
            "1000000"
        ]

        for amountString in amounts {
            guard let amount = Decimal(string: amountString) else {
                XCTFail("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Decimal –∏–∑ \(amountString)")
                continue
            }

            let transaction = makeSampleTransaction(amount: amount)
            guard let json = transaction.jsonObject as? [String: Any] else {
                XCTFail("jsonObject –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Dictionary")
                return
            }

            let parsed = Transaction.parse(jsonObject: json)
            XCTAssertEqual(parsed?.amount, amount,
                         "–ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç amount –¥–ª—è —Å—Ç—Ä–æ–∫–∏ \(amountString)")
        }
    }

    // MARK: - Round Trip Testing

    func testJSONObjectParseRoundTrip() {
        let original = makeSampleTransaction()
        let json = original.jsonObject
        let parsed = Transaction.parse(jsonObject: json)
        XCTAssertEqual(parsed, original,
                     "parse(jsonObject:) –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ jsonObject")
    }

    func testRoundTripWithNilComment() {
        let original = makeSampleTransaction(comment: nil)
        let json = original.jsonObject
        let parsed = Transaction.parse(jsonObject: json)
        XCTAssertEqual(parsed, original,
                     "–î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å nil comment")
    }
}
